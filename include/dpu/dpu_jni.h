/* Copyright 2020 UPMEM. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_upmem_dpujni_DpuJNI */

/**
 * @file dpu_jni.h
 * @brief JNI layer for the DPU operations
 */

#ifndef _Included_com_upmem_dpujni_DpuJNI
#define _Included_com_upmem_dpujni_DpuJNI
#ifdef __cplusplus
extern "C" {
#endif

#define __DPU_JNI_FUNCTION__ __attribute__((used))

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    getBackendDescription
 * Signature: (ILjava/lang/String;)Lcom/upmem/dpujni/DpuDescription;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_getBackendDescription(JNIEnv *, jobject, jint, jstring);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    getTargetDescription
 * Signature: (J)Lcom/upmem/dpujni/DpuDescription;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_getTargetDescription(JNIEnv *, jobject, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    reserveDpuRank
 * Signature: (ILjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_reserveDpuRank(JNIEnv *, jobject, jint, jstring, jboolean, jint, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    releaseDpuRank
 * Signature: (J)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_releaseDpuRank(JNIEnv *, jobject, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    isDpuEnabled
 * Signature: (JII)Z
 */
JNIEXPORT jboolean JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_isDpuEnabled(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    resetDpu
 * Signature: (JII)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_resetDpu(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    stopDpu
 * Signature: (JII)J
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_stopDpu(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    stopRank
 * Signature: (JII)J
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_stopRank(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    resumeDpu
 * Signature: (JII)J
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_resumeDpu(JNIEnv *, jobject, jlong, jint, jint, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    resumeRank
 * Signature: (J)J
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_resumeRank(JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    launchThread
 * Signature: (JIIIZ)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_launchThread(JNIEnv *, jobject, jlong, jint, jint, jint, jboolean);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    launchThreadOnRank
 * Signature: (JIZ)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_launchThreadOnRank(JNIEnv *, jobject, jlong, jint, jboolean);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    pollDpu
 * Signature: (JII)Lcom/upmem/dpujni/DpuPollResult;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_pollDpu(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    pollRank
 * Signature: (JI[I[)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_pollRank(JNIEnv *, jobject, jlong, jintArray, jintArray);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyToWram
 * Signature: (JIIII[I)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyToWram(JNIEnv *, jobject, jlong, jint, jint, jint, jintArray, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyFromWram
 * Signature: (JIIIII[)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyFromWram(JNIEnv *, jobject, jlong, jint, jint, jint, jint, jintArray);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyToIram
 * Signature: (JIIIL[I)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyToIram(JNIEnv *, jobject, jlong, jint, jint, jint, jlongArray, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyFromIram
 * Signature: (JIIIIL[)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyFromIram(JNIEnv *, jobject, jlong, jint, jint, jint, jint, jlongArray);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyToMramNumber
 * Signature: (JIIIB[II)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyToMramNumber(JNIEnv *, jobject, jlong, jint, jint, jint, jbyteArray, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyToMrams
 * Signature: (JLcom/upmem/dpujni/DpuMramTransfer;II)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyToMrams(JNIEnv *, jobject, jlong, jobject, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyFromMrams
 * Signature: (JLcom/upmem/dpujni/DpuMramTransfer;II)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyFromMrams(JNIEnv *, jobject, jlong, jobject, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    copyFromMramNumber
 * Signature: (JIIIIB[I)J
 */
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_copyFromMramNumber(JNIEnv *, jobject, jlong, jint, jint, jint, jint, jbyteArray, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    triggerFaultOnRank
 * Signature: (J)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_triggerFaultOnRank(JNIEnv *, jobject, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    clearFaultOnRank
 * Signature: (J)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_clearFaultOnRank(JNIEnv *, jobject, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    dumpDpuContext
 * Signature: (JII)Lcom/upmem/dpujni/DpuContextDump;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_dumpDpuContext(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    initializeFaultProcess
 * Signature: (JII)Lcom/upmem/dpujni/DpuFaultResult;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_initializeFaultProcess(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    dumpFaultRemainingDpuContext
 * Signature: (JIIJ)Lcom/upmem/dpujni/DpuContextDump;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_dumpFaultRemainingDpuContext(JNIEnv *, jobject, jlong, jint, jint, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    doDebugStep
 * Signature: (JIIJI)Lcom/upmem/dpujni/DpuFaultResult;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_doDebugStep(JNIEnv *, jobject, jlong, jint, jint, jlong, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    finalizeFaultProcess
 * Signature: (JIIJZ)V;
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_finalizeFaultProcess(JNIEnv *, jobject, jlong, jint, jint, jlong, jboolean);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    readAndUpdateNotifyBit
 * Signature: (JIIIZ)Z
 */
JNIEXPORT jboolean JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_readAndUpdateNotifyBit(JNIEnv *, jobject, jlong, jint, jint, jint, jboolean);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    systemReport
 * Signature: (JIILjava/lang/String;)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_systemReport(JNIEnv *, jobject, jlong, jint, jint, jstring);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    preExecutionProcedure
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_preExecution(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    postExecutionProcedure
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_postExecution(JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    utilFormatString
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_utilFormatString(JNIEnv *, jobject, jstring, jstring);
/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    utilFormatInt
 * Signature: (Ljava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_utilFormatInt(JNIEnv *, jobject, jstring, jint);
/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    utilFormatLong
 * Signature: (Ljava/lang/String;J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_utilFormatLong(JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    utilFormatDouble
 * Signature: (Ljava/lang/String;D)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_utilFormatDouble(JNIEnv *, jobject, jstring, jdouble);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    utilFormatChar
 * Signature: (Ljava/lang/String;B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_utilFormatChar(JNIEnv *, jobject, jstring, jbyte);

// Returns -1 if the file is not found or is corrupted, an ELF info identifier otherwise.
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_openElfFile(JNIEnv *, jobject, jstring file);

// Returns -1 if the file is corrupted, an ELF info identifier otherwise
JNIEXPORT jlong JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_mapElfFile(JNIEnv *, jobject, jbyteArray buffer, jint size, jstring file_or_null);

JNIEXPORT void JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_closeElfFile(JNIEnv *, jobject, jlong elf_info);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    loadElfProgram
 * Signature: (JIIJSSI;)Lcom/upmem/dpujni/DpuLoaderResult;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_loadElfProgram(JNIEnv *, jobject, jlong, jint, jint, jlong, jshort, jshort, jint);

/*
 * Class:     com_upmem_dpujni_DpuJNI
 * Method:    loadElfProgramOnRank
 * Signature: (JJ;)Lcom/upmem/dpujni/DpuLoaderResult;
 */
JNIEXPORT jobject JNICALL __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_loadElfProgramOnRank(JNIEnv *, jobject, jlong, jlong);

// Returns an array of bytes containing the section contents, or null if the section is not found.
JNIEXPORT jbyteArray __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_loadElfSection(JNIEnv *, jobject, jlong elf_info, jstring name);

// Fills in the supplied HashMap<String, Int> with symbols. If the section does not exist, the resulting
// map is empty.
JNIEXPORT void __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_loadElfSymbols(JNIEnv *, jobject, jlong elf_info, jstring name, jobject map);

// Fills in the supplied ArrayList<String> with symbols. Result is empty if an error occurs during the parsing.
JNIEXPORT void __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_getElfSections(JNIEnv *, jobject, jlong elf_info, jobject list);

// Returns a POJO representing the RTE.
JNIEXPORT jobject __DPU_JNI_FUNCTION__
Java_com_upmem_dpujni_DpuJNI_getRuntimeInfo(JNIEnv *, jobject, jlong elf_info);

#ifdef __cplusplus
}
#endif
#endif
